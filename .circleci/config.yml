# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  node: circleci/node@4.1
  heroku: circleci/heroku@1.2
  aws-ecr: circleci/aws-ecr@7.3.0

executors:
  docker-publisher:
    environment:
      IMAGE_NAME: ericdo/ppz_node
    docker:
      - image: circleci/buildpack-deps:stretch

workflows:
  build-and-test:
    jobs:
      - build-and-test:
          context:
            - Docker
      - publish-to-dockerhub:
          context:
            - Docker
          requires:
            - build-and-test
          filters:
            branches:
              only: master
      - aws-ecr/build-and-push-image:
          requires:
            - build-and-test
          account-url: AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME
          aws-access-key-id: ACCESS_KEY_ID_ENV_VAR_NAME
          aws-secret-access-key: SECRET_ACCESS_KEY_ENV_VAR_NAME
          create-repo: false
          dockerfile: Dockerfile
          path: ./backend/server
          repo: ericdo/ppz_node
          skip-when-tags-exist: false
          tag: 'latest'
          filters:
            branches:
              only: aws
      # - heroku/deploy-via-git:
      #     force: true
      #     requires:
      #       - build-and-test
      #     filters:
      #       branches:
      #         only: master

jobs:
  build-and-test:
    docker:
      - image: cimg/node:17.2.0
      - image: circleci/postgres:11-alpine-ram
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
      - image: circleci/redis
    environment: 
      DATABASE_URL: postgresql://postgres:postgres@localhost/ppz
      REDIS_URL: redis://localhost
    steps:
      - checkout
      - run: sudo apt-get update
      - run: sudo apt install postgresql-client
      - run:
          name: install dockerize
          command: sudo wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1
      - run: 
          name: Add Postgres commands to PATH
          command: echo 'export PATH=/usr/lib/postgresql/9.4/bin/:$PATH' >> $BASH_ENV
      - run: 
          name: Wait for Postgres container to be ready
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run: 
          name: Initialize database
          command: psql -h localhost -p 5432 -U postgres < './database/scripts/init.sql'
      - run: cd backend && npm install
      - run: cd backend && npm run test:ci

  publish-to-dockerhub:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: |
            cd backend && docker build -t $IMAGE_NAME:latest .
      - run:
          name: Archive Docker image
          command: docker save -o image.tar $IMAGE_NAME
      - run:
          name: Load archived Docker image
          command: docker load -i image.tar
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push $IMAGE_NAME:latest