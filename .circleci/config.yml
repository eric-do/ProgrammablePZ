# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  node: circleci/node@4.1
  # The heroku orb contains a set of prepackaged CircleCI configuration you can utilize to deploy applications to heroku
  # Orbs reduce the amount of configuration required for common tasks.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/heroku
  # NOTE: Environment variables containing the necessary secrets can be setup in the CircleCI UI
  # See here https://circleci.com/docs/2.0/env-vars/#setting-an-environment-variable-in-a-project
  heroku: circleci/heroku@1.2

workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
  sample:
    jobs:
      - build:
          context:
            - Docker
      - node/test:
          requires:
            - build
          app-dir: backend
      - heroku/deploy-via-git:
          force: true # this parameter instructs the push to use a force flag when pushing to the heroku remote, see: https://devcenter.heroku.com/articles/git
          requires:
            - node/test # only run deploy-via-git job if the build job has completed
          filters:
            branches:
              # This sample config runs this job on any branch matching the regex below, however, it's more likely you want to only run this job on master.
              only: /.*-heroku-deploy/ # Delete this line
              # only: master  # Uncomment this line

jobs:
  build:
    docker:
      - image: cimg/node:17.2.0
      - image: circleci/postgres:11-alpine-ram
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
      - image: circleci/redis
    environment:
      DATABASE_URL: postgresql://root@localhost/ppz
      REDIS_URL: redis://localhost
    steps:
      - checkout
      # Bundle install dependencies
      - run: sudo apt-get update
      - run: sudo apt install postgresql-client
      - run:
          name: install dockerize
          command: sudo wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1
      - run: echo $(ls)
      - run: echo 'export PATH=/usr/lib/postgresql/9.4/bin/:$PATH' >> $BASH_ENV
      # - run: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run: pg_restore -h localhost -p 5432 -U postgres -d ppz -C './database/scripts/init.sql'
      # - run: psql -U postgres ppz < './database/scripts/init.sql'
      
      # - run: npm install
      # - run:
      #     name: Run tests
      #     command: npm test
